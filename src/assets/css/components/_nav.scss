.#{$namespace}nav {
	
	/* Save root element context for easy access if nesting is needed */
	
	$self: &;
	
	
	/* variables specific to current element */
	
	$element-specific-variables: "";
	
	
	/* properties of current element  + media queries */
	
	position: fixed;
	z-index: z("fixed");
	top: 100%;
	transform: translateY(15%);
	left: 0;
	overflow: auto;
	width: 100%;
	max-width: 25rem;
	height: 70vh;
	font-family: $action-font;
	background-color: $action-color;
	color: #fff;
	transition: transform 0.25s ease-in;
	padding: 2em 2em 0;
	
	.customproperties & {
		background-color: var(--THEME-ACTION);
		color: var(--THEME-ACTION-TEXT);
	}
	
	@include media-breakpoint-up(sm) {
		padding-top: 7rem;
		justify-content: start;
	}
	
	@include media-breakpoint-up(md) {
		padding-top: 8rem;
	}
	
	@include media-breakpoint-up(lg) {
		padding-top: 10rem;
	}
	
	/* Pseudo Elements */
	
	&::before {
	}
	
	&::after {
	}
	
	/*
	Include elements that are linked to the current element but have to reside at the root level of the stylesheet
	(e.g: keyframes)
	*/
	@at-root {
	}
	
	
	/* children - write selector in full in comments in order to facilitate search */
	
	// nav__menu
	&__menu {
		
		// follows same logic as parent
		margin: 0;
		
	}
	
	&__subMenu {
		
		padding-left: 1rem;
		margin-top: 1em;
		
		#{$self}__link {
			
			display: flex;
			align-items: center;
			
			&::before {
				
				content: "";
				display: block;
				width: 1em;
				height: 0.125em;
				margin-right: 0.5em;
				background-color: #fff;
				
				.customproperties & {
					background-color: var(--THEME-ACTION-TEXT);
				}
				
			}
			
		}
		
		#{$self}__linkText {
			font-size: 0.975em;
		}
		
		
	}
	
	// nav__item
	&__item {
		
		// follows same logic as parent
		
		margin-bottom: 1.25em;
		
		&:last-of-type {
			margin-bottom: 0;
		}
		
		&.-active {
			#{$self}__linkText {
				background-size: 100% 50%;
			}
		}
		
		&.-hasChildren {
			
			@include media-breakpoint-up(sm) {
				display: flex;
				align-items: center;
				flex-wrap: wrap;
				
				#{$self}__item {
					
					margin-right: 1rem;
					
				}
			}
			
		}
		
	}
	
	&__link {
		
		@media (hover: hover) {
			
			&:hover {
				
				//text-decoration: none !important;
				#{$self}__linkText {
					
					background-size: 100% 20%;
					
				}
				
			}
			
		}
		
	}
	
	&__linkText {
		
		--THEME-ACTION: var(--THEME-TEXT);
		@include textUnderlineGradient($body-color, 0 0.75em, 0 20%);
		transition: background-size 0.25s ease-out;
		
	}
	
	
	/* modifiers */
	
	// nav -altStyle
	
	&.-active {
		
		// follows same logic as base element
		
		transform: translateY(-100%);
		//@include media-breakpoint-up(sm) {
		//	transform: translateY(0);
		//}
		
	}
	
	/* Pseudo Classes */
	
	&:hover {
		@media (hover: hover) {
			
		}
	}
	
	&:focus {
	}
	
	&:active {
	}
	
	&:focus,
	&:active {
	}
	
	/* random parent element */
	/* 
	*
	*   Syntax : .randomParentElt & {}
	*
	*/
	
}

.#{$namespace}navTrigger {
	
	$self: &;
	
	position: fixed;
	padding: 0;
	z-index: z("menu-trigger");
	width: 4em;
	height: 4em;
	border-radius: 50%;
	bottom: 1em;
	right: 1em;
	background-color: $action-color;
	color: #fff;
	
	.customproperties & {
		background-color: var(--THEME-ACTION);
		color: var(--THEME-ACTION-TEXT);
	}
	
	transition: all 0.2s ease-out;
	
	@include media-breakpoint-up(sm) {
		
		bottom: auto;
		right: auto;
		top: 1em;
		left: 1em;
		
	}
	
	@include media-breakpoint-up(md) {
		
		top: 2em;
		left: 2em;
		width: 5em;
		height: 5em;
		
	}
	
	@include media-breakpoint-up(lg) {
		
		width: 6em;
		height: 6em;
		
	}
	
	&__close {
		
		width: 100%;
		height: 100%;
		border-radius: 50%;
		transform: scale(0);
		transform-origin: center;
		position: absolute;
		z-index: z("low");
		top: 0;
		left: 0;
		background-color: #fff;
		
		.customproperties & {
			background-color: var(--THEME-BG);
		}
		
		transition: all 0.2s ease-out;
		
		&::before,
		&::after {
			
			content: "";
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			height: 50%;
			width: 0.2em;
			background-color: $action-color;
			
			.customproperties & {
				background-color: var(--THEME-ACTION);
			}
		}
		
		&::before {
			transform: translate(-50%, -50%) rotate(45deg);
		}
		
		&::after {
			transform: translate(-50%, -50%) rotate(-45deg);
		}
		
		
	}
	
	@media (hover: hover) {
		
		&:hover {
			
			transform: scale(1.2);
			
		}
		
	}
	
	&.-active {
		
		color: $action-color;
		
		#{$self}__close {
			
			transform: scale(1.1);
			
		}
		
	}
	
}